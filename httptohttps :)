# Self-Signed SSL for Local Nginx Virtual Hosts: Full Process
This documentation walks through the **complete process** of creating self-signed SSL certificates with Subject Alternative Names (SAN) for local development sites (`site1.local`, `site2.local`), configuring Nginx, and understanding each command. It is written for Linux (Ubuntu/Debian).
## 1. Create the Hosts Entries (Local DNS)
**Purpose:** Let your system recognize `site1.local` and `site2.local` as local sites by mapping them to `127.0.0.1`.
sudo nano /etc/hosts
Add lines:
127.0.0.1 site1.local
127.0.0.1 site2.local
_Reason: Simulates DNS so browsers will connect requests for these domains to your local server._

## 2. Create SSL Config File with Subject Alternative Names (SAN)
**Purpose:** Ensure the certificate is valid for multiple domains (both site1.local and site2.local), meeting browser requirements for modern SSL.
nano ~/localhost.cnf
Paste:
```ini
[req]
default_bits = 2048
prompt = no
default_md = sha256
req_extensions = req_ext
distinguished_name = dn

[dn]
CN = site1.local

[req_ext]
subjectAltName = @alt_names

[alt_names]
DNS.1 = site1.local
DNS.2 = site2.local
_Reason: By defining SANs, browsers will accept the cert for both local domains. Without SAN, modern browsers will reject even self-signed certs for multi-domain testing._

## 3. Generate Self-Signed SSL Certificate and Private Key
**Purpose:** Create the SSL key (secret) and certificate (public), valid for one year, and include the SAN information.
```bash
openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
  -keyout ~/site-local.key \
  -out ~/site-local.crt \
  -config ~/localhost.cnf \
  -extensions req_ext
_Reason for options:_
- `-x509`: Generates a self-signed cert for SSL.
- `-nodes`: No passphrase, so Nginx can load key without manual entry.
- `-days 365`: Valid for one year.
- `-newkey rsa:2048`: Generates new RSA private key.
- `-keyout`, `-out`: File paths for key and cert output.
- `-config`: Uses your SAN config so all domains are covered.
- `-extensions req_ext`: Ensures subjectAltName is used.

## 4. Move SSL Files to System Directory for Nginx
**Purpose:** Place SSL files in a secure and standard Nginx directory/
```bash
sudo mkdir -p /etc/nginx/ssl
sudo mv ~/site-local.key ~/site-local.crt /etc/nginx/ssl/
_Reason: By putting SSL files in `/etc/nginx/ssl`, Nginx can easily find and use them securely._
***

## 5. Configure Nginx for HTTPS Virtual Hosts
**Purpose:** Direct Nginx to use your self-signed cert for SSL connections on both site1.local and site2.local.
### For `site1.local`:
sudo nano /etc/nginx/sites-available/site1.local
Paste:
```nginx
server {
    listen 443 ssl;
    server_name site1.local;

    root /var/www/site1.local/html;
    index index.html;

    ssl_certificate /etc/nginx/ssl/site-local.crt;
    ssl_certificate_key /etc/nginx/ssl/site-local.key;

    location / {
        try_files $uri $uri/ =404;
    }
}

server {
    listen 80;
    server_name site1.local;
    return 301 https://$host$request_uri;
}
```

### For `site2.local`:
sudo nano /etc/nginx/sites-available/site2.local
Paste:
```nginx
server {
    listen 443 ssl;
    server_name site2.local;

    root /var/www/site2.local/html;
    index index.html;

    ssl_certificate /etc/nginx/ssl/site-local.crt;
    ssl_certificate_key /etc/nginx/ssl/site-local.key;

    location / {
        try_files $uri $uri/ =404;
    }
}

server {
    listen 80;
    server_name site2.local;
    return 301 https://$host$request_uri;
}
```
_Reason: Each server block handles HTTPS. The cert/key file paths allow encrypted connections. The HTTP block redirects traffic to HTTPS._

## 6. Enable Sites and Test Nginx Config
**Purpose:** Activate your site configs and check for errors.
sudo ln -sf /etc/nginx/sites-available/site1.local /etc/nginx/sites-enabled/
sudo ln -sf /etc/nginx/sites-available/site2.local /etc/nginx/sites-enabled/
sudo nginx -t
_Reason: Symbolic links activate the virtual hosts. `nginx -t` tests for config errors before applying changes.

## 7. Reload Nginx to Apply Config
sudo systemctl reload nginx
_Reason: Reloading Nginx safely applies the new SSL configurations and site blocks.

## 8. Access Sites and Handle Browser Warning
https://site1.local        https://site2.local

## 9. (Optional) Add Certificate to Trusted Roots
To stop browsers from showing the warning:
- On **Linux**: 
    sudo cp /etc/nginx/ssl/site-local.crt /usr/local/share/ca-certificates/site-local.crt
    sudo update-ca-certificates
This process gives you a complete, secure local environment for testing development sites over HTTPS with Nginx, fully explained for future reference or sharing.
